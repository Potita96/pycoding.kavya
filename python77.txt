//Problem:

Exceptions
Errors detected during execution are called exceptions.

Example :

ZeroDivisionError
This error is raised when the second argument of a division or modulo operation is zero.

>>> a = '1'
>>> b = '0'
>>> print int(a) / int(b)
>>> ZeroDivisionError: integer division or modulo by zero

ValueError
This error is raised when a built-in operation or function receives an argument that has the right type but an inappropriate value.

>>> a = '1'
>>> b = '#'
>>> print int(a) / int(b)
>>> ValueError: invalid literal for int() with base 10: '#'

Handling Exceptions
The statements try and except can be used to handle selected exceptions. A try statement may have more than one except clause to specify handlers for different exceptions.

#Code
try:
    print 1/0
except ZeroDivisionError as e:
    print "Error Code:",e

Output
Error Code: integer division or modulo by zero

Task :
You are given two values a and b.
Perform integer division and print a//b.//








CODE:
x = int(input());
for i in range(x):
    try:
        a, b = input().split()
        print(int(a)//int(b))
    except ZeroDivisionError as e:
        print("Error Code:",e);
    except ValueError as v:
        print("Error Code:",v);








Input (stdin)
3
1 0
2 $
3 1
Expected Output
Error Code: integer division or modulo by zero
Error Code: invalid literal for int() with base 10: '$'
3
